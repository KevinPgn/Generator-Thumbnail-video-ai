datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  credits       Int            @default(2)    // Free credits for new users
  thumbnails    Thumbnail[]    // Relation to generated thumbnails
  subscriptions Subscription[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

 
model Thumbnail {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  prompt      String    // Description or prompt for the thumbnail
  status      String    @default("pending") // pending, completed, failed
  
  // Individual image URLs instead of array
  image1      String?
  image2      String?
  image3      String?
  image4      String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
 
model Subscription {
  id                 String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  stripeCustomerId  String?   @unique
  stripePriceId     String?
  stripeSubscriptionId String? @unique
  
  status            String    // active, canceled, past_due
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}